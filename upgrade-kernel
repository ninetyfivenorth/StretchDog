#!/bin/bash

export LC_ALL=C

if  [ ! -f /mnt/live/tmp/modules ]; then    # for live-boot
# should be exact, parse from /proc/cmdline
   live_dir=$(grep -o "live-media-path=.*" /proc/cmdline |sed 's: .*::' |sed 's:live-media-path=/::')
   if [[ -z "$live_dir" ]] ; then
      live_dir="live/"
   fi

# get the exact path containing initrd and vmlinuz files for live-boot 3/4. 
test_persistence() {
NUM=$(find /lib/live/mount/persistence -mindepth 1 -maxdepth 1 -not -empty -type d | wc -l)
if [ "$NUM" -gt 2 ]; then
    for i in $(ls -d /lib/live/mount/persistence/* 2> /dev/null); do
    # Create a testfile on / and check if it exists also on the root of the directory '$i'
    # If it does, then this should be the persistence directory
    BASE=$(basename "$i") 
    TESTFILE=$(mktemp --tmpdir=/)  
    [ -n $i ] && [ -f $i/$TESTFILE ] && PERSIST="$i"
    # Define the 'home' partition
    EXCL=$(losetup -a | grep '/live/persistence' | grep -o "$BASE")
    [ -n "$(ls -A $i 2> /dev/null)" ] && [ -z "$EXCL" ] && [ ! -f $i/$TESTFILE ] && MEDIUM="$i"
    rm -f $TESTFILE
    done
else
    for i in $(ls -d /lib/live/mount/persistence/* 2> /dev/null); do
    # Create a testfile on / and check if it exists also on the root of the directory '$i'
    # If it does, then this should be the persistence directory 
    TESTFILE=$(mktemp --tmpdir=/)  
    [ -n $i ] && [ -f $i/$TESTFILE ] && PERSIST="$i"
    # The directory that does not contain the testfile should be the 'home' partition: 
    [ -n "$(ls -A $i 2> /dev/null)" ] && [ ! -f $i/$TESTFILE ] && MEDIUM="$i"
    rm -f $TESTFILE
    done
fi
}
test_persistence

if [ -z "$MEDIUM" ]; then
MEDIUM=$(mount -l | grep -m 1 /lib/live/mount/persistence | awk 'BEGIN{FS=" "} {print $3}')
fi

# still no path for MEDIUM found, booting without persistence?
if [ -z "$MEDIUM" ]; then
   if grep -qv " persistence " /proc/cmdline; then
MEDIUM="/lib/live/mount/medium"
   fi
fi

# remount MEDIUM read-write
mount -o remount,rw $MEDIUM 2> /dev/null

# By default overlay is mounted twice (in case no persistence), unmounting it, sort of 'releases' it, not sure why but it works ;) 
umount /lib/live/mount/overlay 2> /dev/null

BASE="$MEDIUM/$live_dir"

if ! grep -q " persistence " /proc/cmdline; then
echo "Not booted with 'persistence' parameter, note well:"
echo "that the changes should be saved after installing the new kernel"
echo "press ctrl+c to exit this script, or wait a while to continue anyway"
sleep 6 
fi

else    # for porteus-boot
BASE="$(cat /mnt/live/etc/homedrv)"
if [ -f /mnt/live/tmp/changes-exit ]; then
CHANGES=$(cat /proc/cmdline | grep -o "changes=.*" |sed 's| .*||' |sed 's|changes=||' | awk 'BEGIN{FS="EXIT:"} {print $2}')
else
CHANGES=$(cat /proc/cmdline | grep -o "changes=.*" |sed 's| .*||' |sed 's|changes=||')
fi
	if [[ $CHANGES == "" ]]; then
echo "Not booted with 'changes=' parameter, note well:"
echo "that the changes should be saved after installing the new kernel"
echo "press ctrl+c to exit this script, or wait a while to continue anyway"
sleep 6 
	fi
fi

echo "What this script does is:"
echo "- Upgrade the kernel (linux-image) if there is an update available"
echo "- Upgrade the initrd and vmlinuz files inside $BASE"
echo "(and create backup of the older ones to *.bak)"
echo "Note: this only works when frugally installed, not from read-only media e.g CD"
echo "Also, this script assumes that the initrd and vmlinuz files are"
echo "located in the same folder as the main filesystem.squashfs, e.g. in 'casper'" 

read -sp "Press ENTER to continue "
clear
echo

if [ ! -w $BASE ]; then
echo "Sorry, it seems that $BASE is on read-only media, booting from CD maybe?"
echo "Cannot write here, exiting..."
sleep 3
exit
fi

if [[ !  $(ls $BASE | grep "vmlinuz") ]]; then
echo "Sorry, vmlinuz not found, it should be in the same location as the main filesystem.squashfs"
echo "Cannot continue, exiting..."
sleep 3
exit
fi

# remove pinned linux-image registration from /etc/apt/preferences
# create backup of /etc/apt/preferences
cp -af /etc/apt/preferences /etc/apt/preferences.bak
cp -af /var/lib/synaptic/preferences /var/lib/synaptic/preferences.bak
echo "Remove pinned entries for package linux-image-*"
sleep 1 
sed -i "/^.*"linux-image-$(uname -r)"/,/1001/d" /etc/apt/preferences
sed -i "/^.*"linux-image-*"/,/1001/d" /var/lib/synaptic/preferences

echo OK
rm -f /var/log/dpkg.log
echo "Update the package lists . . ."
apt-get update

DEBIAN_FRONTEND=noninteractive apt-get -yq --assume-yes install live-boot live-boot-initramfs-tools
# Activate update-initramfs
cp -a --remove-destination /usr/sbin/update-initramfs.orig.initramfs-tools /usr/sbin/update-initramfs 2> /dev/null
VERNEWKERNEL=$(ls /lib/modules | tail -1)
VERUNAME=$(uname -r)
	if [ "$(uname -m)" = "i686" ]; then
ARCH=i386
if [ -z "$(uname -r | grep pae)" ]; then
KERNEL="linux-image-686"
echo "Booted with no-pae kernel ?, will upgrade linux-image-686"
export NOPAE="yes"
LINUX=$(apt-get -s install $KERNEL | grep -o "linux-image-.*-686" | grep -v $KERNEL | head -1)
else
KERNEL="linux-image-686-pae"
LINUX=$(apt-get -s install $KERNEL | grep -o "linux-image-.*-686-pae" | grep -v $KERNEL | head -1)
fi
if [[ "$VERNEWKERNEL" != "$VERUNAME" ]]; then
echo "Reinstalling..."
apt-get purge $KERNEL -y --assume-yes
apt-get install $KERNEL -y --assume-yes | tee /tmp/aptout
else
apt-get install $KERNEL -y --assume-yes | tee /tmp/aptout
fi
ret=`echo $PIPESTATUS`
  if [ "$ret" -eq 100 ]; then
echo -e "\e[0;33mNothing has been installed or something unexpected occurred \nWill restore back to previous state now..\033[0m"
mv -f /etc/apt/preferences.bak /etc/apt/preferences
mv -f /var/lib/synaptic/preferences.bak /var/lib/synaptic/preferences
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs
sleep 3
read -s -n 1 -p "Press any key to close . . ."
exit
  fi
if grep -q "is already the newest version" /tmp/aptout; then
echo Latest version already installed, exiting...
mv -f /etc/apt/preferences.bak /etc/apt/preferences
mv -f /var/lib/synaptic/preferences.bak /var/lib/synaptic/preferences
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs
rm -f /boot/initrd.img-*
read -s -n 1 -p "Press any key to close . . ."
exit
fi

if [ -z "$(echo $LINUX | grep "4.9.0-4")" ]; then
echo "Cannot upgrade to other version than 4.9.0-4,"
echo "or newest version already installed, exiting . . ."
mv -f /etc/apt/preferences.bak /etc/apt/preferences
mv -f /var/lib/synaptic/preferences.bak /var/lib/synaptic/preferences
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs
sleep 3
read -s -n 1 -p "Press any key to close . . ."
exit
fi
	elif [ "$(uname -m)" = "x86_64" ]; then
ARCH=amd64
KERNEL="linux-image-amd64"
LINUX=$(apt-get -s install $KERNEL | grep -o "linux-image-.*-amd64" | grep -v $KERNEL | head -1)
if [[ "$VERNEWKERNEL" != "$VERUNAME" ]]; then
echo "Reinstalling..."
apt-get purge $KERNEL -y --assume-yes
apt-get install $KERNEL -y --assume-yes | tee /tmp/aptout
else
apt-get install $KERNEL -y --assume-yes | tee /tmp/aptout
fi
ret=`echo $PIPESTATUS`
  if [ "$ret" -eq 100 ]; then
echo -e "\e[0;33mNothing has been installed or something unexpected occurred \nWill restore back to previous state now..\033[0m"
mv -f /etc/apt/preferences.bak /etc/apt/preferences
mv -f /var/lib/synaptic/preferences.bak /var/lib/synaptic/preferences
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs
sleep 3
read -s -n 1 -p "Press any key to close . . ."
exit
  fi
if grep -q "is already the newest version" /tmp/aptout; then
echo Latest version already installed, exiting...
mv -f /etc/apt/preferences.bak /etc/apt/preferences
mv -f /var/lib/synaptic/preferences.bak /var/lib/synaptic/preferences
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs
rm -f /boot/initrd.img-*
read -s -n 1 -p "Press any key to close . . ."
exit
fi

if [ -z "$(echo $LINUX | grep "4.9.0-4")" ]; then
echo "Cannot upgrade to other version than 4.9.0-4,"
echo "or newest version already installed, exiting . . ."
mv -f /etc/apt/preferences.bak /etc/apt/preferences
mv -f /var/lib/synaptic/preferences.bak /var/lib/synaptic/preferences
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs
sleep 3
read -s -n 1 -p "Press any key to close . . ."
exit
fi
	fi
if grep -q "is already the newest version" /tmp/aptout; then
echo Latest version already installed, exiting...
mv -f /etc/apt/preferences.bak /etc/apt/preferences
mv -f /var/lib/synaptic/preferences.bak /var/lib/synaptic/preferences
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs
rm -f /boot/initrd.img-*
read -s -n 1 -p "Press any key to close . . ."
exit
fi

# remove possibly left-over folder init-work from previous run
#rm -rf "$BASE"/init-work
rm -rf /tmp/init-work

mkdir -p /tmp/init-work/lb3
mkdir -p /tmp/init-work/lb3-new
mkdir -p /tmp/init-work/pb

##### init work in /tmp/init-work/lb3-new/ #####
VERNEWKERNEL=$(grep " install " /var/log/dpkg.log | sort -r |  cut -d " " -sf4 | grep -o "^[^:]*" | grep $LINUX | head -n 1 | sed -e 's/linux-image-//')

mkdir -p /lib/modules/$VERNEWKERNEL/kernel/fs/aufs
if [ "$ARCH" = "i386" ]; then
  if [ "$NOPAE" = "yes" ]; then
wget -N https://fredx181.github.io/StretchDog/aufs_squashfs-k4.9.0-4/aufs-nopae/aufs.ko -O /lib/modules/$VERNEWKERNEL/kernel/fs/aufs/aufs.ko
wget -N https://fredx181.github.io/StretchDog/aufs_squashfs-k4.9.0-4/squashfs-nopae/squashfs.ko -O /lib/modules/$VERNEWKERNEL/kernel/fs/squashfs/squashfs.ko
  else
wget -N https://fredx181.github.io/StretchDog/aufs_squashfs-k4.9.0-4/aufs32/aufs.ko -O /lib/modules/$VERNEWKERNEL/kernel/fs/aufs/aufs.ko
wget -N https://fredx181.github.io/StretchDog/aufs_squashfs-k4.9.0-4/squashfs32/squashfs.ko -O /lib/modules/$VERNEWKERNEL/kernel/fs/squashfs/squashfs.ko
  fi
elif [ "$ARCH" = "amd64" ]; then
wget -N https://fredx181.github.io/StretchDog/aufs_squashfs-k4.9.0-4/aufs64/aufs.ko -O /lib/modules/$VERNEWKERNEL/kernel/fs/aufs/aufs.ko
wget -N https://fredx181.github.io/StretchDog/aufs_squashfs-k4.9.0-4/squashfs64/squashfs.ko -O /lib/modules/$VERNEWKERNEL/kernel/fs/squashfs/squashfs.ko
fi
depmod $VERNEWKERNEL
CRYPTSETUP=Y update-initramfs -t -c -k $VERNEWKERNEL
cp -a /boot/initrd.img-$VERNEWKERNEL /tmp/init-work/lb3-new/initrd.img

  if [ $? -ne 0 ]; then
echo "File /boot/initrd.img-$VERNEWKERNEL not found, cannot continue, exiting..."
rm -rf /tmp/init-work
mv -f /etc/apt/preferences.bak /etc/apt/preferences
mv -f /var/lib/synaptic/preferences.bak /var/lib/synaptic/preferences
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs
sleep 3
read -s -n 1 -p "Press any key to close . . ."
exit
  fi
cd /tmp/init-work/lb3-new/
zcat initrd.img | cpio -i -d
# restore update-initramfs symlink
ln -sf /bin/live-update-initramfs /usr/sbin/update-initramfs


##### init work in /tmp/init-work/lb3/ #####
    if [ -e "$BASE"/initrd.img ]; then
cp -a "$BASE"/initrd.img /tmp/init-work/lb3/
cd /tmp/init-work/lb3/
xz -dc initrd.img | cpio -i
# now remove lib/modules/* and initrd
rm -fr lib/modules/*
rm -f initrd.img
cp -a ../lb3-new/lib/modules/* lib/modules/
    fi


    if [ -e "$BASE"/initrd1.xz ]; then
##### init work in /tmp/init-work/pb/ #####
cp -a "$BASE"/initrd1.xz /tmp/init-work/pb/
cd /tmp/init-work/pb/
xz -dc initrd1.xz | cpio -i
# now remove lib/modules/* and initrd
rm -fr lib/modules/*
rm -f initrd1.xz
cp -a ../lb3-new/lib/modules/* lib/modules/
    fi

###rm -rf /tmp/init-work/lb3-new
rm -f  /etc/apt/preferences.bak /var/lib/synaptic/preferences.bak

##### create initrd files #####
echo "Creating initrd.img and initrd1.xz, xz compressed, please wait . . ."
cd /tmp/init-work/lb3/
# initrd.img
[ -d /tmp/init-work/lb3/lib/modules ] && find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > ../initrd.img || echo "Not creating new initrd.img, original wasn't located in $BASE"
cd /tmp/init-work/pb/
# initrd1.xz
[ -d /tmp/init-work/pb/lib/modules ] && find . -print | cpio -o -H newc 2>/dev/null | xz -f --extreme --check=crc32 > ../initrd1.xz || echo "Not creating new initrd1.xz, original wasn't located in $BASE"

# rename original initrd and vmlinuz files, to .bak (create backups just in case)
[ -e /tmp/init-work/initrd1.xz ] && mv -f "$BASE"/initrd1.xz "$BASE"/initrd1.xz.bak
[ -e /tmp/init-work/initrd.img ] && mv -f "$BASE"/initrd.img "$BASE"/initrd.img.bak
[ -e /boot/vmlinuz-$VERNEWKERNEL ] && mv -f "$BASE"/vmlinuz1 "$BASE"/vmlinuz1.bak

# Move new initrd files to $BASE and copy new vmlinuz to $BASE
[ -e /tmp/init-work/initrd.img ] && mv -f /tmp/init-work/initrd.img "$BASE"/initrd.img || echo "initrd.img: Not found"
[ -e /tmp/init-work/initrd1.xz ] && mv -f /tmp/init-work/initrd1.xz "$BASE"/initrd1.xz || echo "initrd1.xz: Not found"
cp -af /boot/vmlinuz-$VERNEWKERNEL "$BASE"/vmlinuz1 || echo "/boot/vmlinuz-$VERNEWKERNEL: Not found"

###rm -rf /tmp/init-work

# Pin the new versions of linux-image
echo "Adding new entries (pin) of linux-image in preferences files..."
VERSIONK=$(dpkg -s $KERNEL | grep "Version:" | awk '{ print $2 }')
VERSION=$(dpkg -s linux-image-$VERNEWKERNEL | grep "Version:" | awk '{ print $2 }')

echo '

Package: '$KERNEL'
Pin: version '$VERSIONK'
Pin-Priority: 1001
' >> /etc/apt/preferences

echo '

Package: linux-image-'$VERNEWKERNEL'
Pin: version '$VERSION'
Pin-Priority: 1001
' >> /etc/apt/preferences

echo '

Package: '$KERNEL'
Pin: version '$VERSIONK'
Pin-Priority: 1001
' >> /var/lib/synaptic/preferences

echo '

Package: linux-image-'$VERNEWKERNEL'
Pin: version '$VERSION'
Pin-Priority: 1001
' >> /var/lib/synaptic/preferences

echo "Fixing preferences files... (e.g. required to remove first empty line(s) )"
# no empty lines allowed at the top of preferences files, delete them
sed -i '/./,$!d' /etc/apt/preferences 
sed -i '/./,$!d' /var/lib/synaptic/preferences
# replace multiple empty lines by one
sed -i '/^$/N;/^\n$/D' /etc/apt/preferences
sed -i '/^$/N;/^\n$/D' /var/lib/synaptic/preferences

echo "Make sure the changes will be saved (with the upgraded linux-image package)"
echo "when doing a reboot booting with the new created files in $BASE"
rm -f /boot/vmlinuz-$VERNEWKERNEL
rm -f /boot/initrd.img-$VERNEWKERNEL
rm -f /vmlinuz*
rm -f /initrd*
echo "Removed /boot/vmlinuz-$VERNEWKERNEL and /boot/initrd.img-$VERNEWKERNEL"
echo "these are not in use on a live system"
echo
echo "After reboot, when you run 'uname -a' the new kernel version: $VERNEWKERNEL should show."
echo "If all is fine, you may want to remove the older (possibly not in use) 'linux-image' package:"
echo "apt-get purge linux-image-$(uname -r)"
echo
echo Done
read -s -n 1 -p "Press any key to close . . ."

